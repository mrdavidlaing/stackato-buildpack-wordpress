#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
WORDPRESS_VERSION=3.7.1
HIPHOP_VERSION=2.1.0-dev
NGINX_VERSION=1.2.6
PHP_VERSION=5.4.15
WPCLI_VERSION=0.10.0
DOWNLOAD_TIMEOUT_SEC=3600
S3_BUCKET=ci-stackato-buildpack-wordpress
#
WORDPRESS_URL="http://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz"
NGINX_URL="https://s3.amazonaws.com/${S3_BUCKET}/nginx-${NGINX_VERSION}.tar.gz"
HIPHOP_URL="https://s3.amazonaws.com/${S3_BUCKET}/hiphop-php-${HIPHOP_VERSION}.tar.gz"
PHP_URL="https://s3.amazonaws.com/${S3_BUCKET}/php-${PHP_VERSION}.tar.gz"
WPCLI_URL="https://github.com/wp-cli/wp-cli/archive/v${WPCLI_VERSION}.tar.gz"
# END CONFIG

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# parse and derive params
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2
HELP=$'\e[1;33m=-=-=-=-= bin/compile =-=-=-=-=\nAdd WP Core files, HipHop-PHP runtime and configuration to files in <build-dir> so they can be served by Stackato.\nDownloaded assets are cached in <cache-dir>.\nMust be called like this:\nbin/compile <build-dir> <cache-dir>\e[00m'
if [[ -z "${BUILD_DIR}" ]]; then
  echo -e "\e[00;31mError: You must pass a valid <build-dir>"
  echo -e "$HELP"
  exit 1
fi
if [ ! -d "${BUILD_DIR}/public/wp-content" ]; then
  echo -e "\e[00;31mError: ${BUILD_DIR}/public/wp-content must exist and contain your wordpress themes & plugins"
  echo -e "$HELP"
  exit 1
fi
if [[ -z "$CACHE_DIR" ]]; then
  echo -e "\e[00;31mError: You must pass a valid <cache-dir>"
  echo -e "$HELP"
  exit 1
fi

echo "-----> compile params: BUILDPACK_DIR: ${BUILDPACK_DIR} BUILD_DIR: ${BUILD_DIR} CACHE_DIR:$CACHE_DIR"

#Ensure folders exist
mkdir -p "$CACHE_DIR"
mkdir -p "${BUILD_DIR}/runtimes"

#normalize paths
BUILD_DIR=$(cd "${BUILD_DIR}";pwd) 
CACHE_DIR=$(cd "${CACHE_DIR}";pwd)
#
CACHED_NGINX_DOWNLOAD="${CACHE_DIR}/nginx-${NGINX_VERSION}.tar.gz"
CACHED_PHP_DOWNLOAD="${CACHE_DIR}/php-${PHP_VERSION}.tar.gz"
CACHED_WPCLI_DOWNLOAD="${CACHE_DIR}/wpcli-${WPCLI_VERSION}.tar.gz"
CACHED_HIPHOP_DOWNLOAD="${CACHE_DIR}/hiphop-php-${HIPHOP_VERSION}.tar.gz"
CACHED_WORDPRESS_DOWNLOAD="${CACHE_DIR}/wordpress-${WORDPRESS_VERSION}.tar.gz"

echo "-----> Installing Nginx v${NGINX_VERSION}"
if [ ! -f "${CACHED_NGINX_DOWNLOAD}" ]; then
  echo "Downloading $NGINX_URL to cache: ${CACHED_NGINX_DOWNLOAD}" | indent
  curl --max-time $DOWNLOAD_TIMEOUT_SEC --location $NGINX_URL > "${CACHED_NGINX_DOWNLOAD}"
fi
if [ ! -d "${BUILD_DIR}/runtimes/nginx" ]; then
   echo "Extracting ${CACHED_NGINX_DOWNLOAD} to ${BUILD_DIR}/runtimes/nginx" | indent
   tar -xz --directory "${BUILD_DIR}/runtimes" -f "${CACHED_NGINX_DOWNLOAD}"
else
  echo "${BUILD_DIR}/runtimes/nginx already configured" | indent
fi

echo "-----> Installing PHP v${PHP_VERSION}"
if [ ! -f "${CACHED_PHP_DOWNLOAD}" ]; then
  echo "Downloading $PHP_URL to cache: ${CACHED_PHP_DOWNLOAD}" | indent
  curl --max-time $DOWNLOAD_TIMEOUT_SEC --location $PHP_URL > "${CACHED_PHP_DOWNLOAD}"
fi
if [ ! -d "${BUILD_DIR}/runtimes/php" ]; then
   echo "Extracting ${CACHED_PHP_DOWNLOAD} to ${BUILD_DIR}/runtimes/php" | indent
   tar -xz --directory "${BUILD_DIR}/runtimes" -f "${CACHED_PHP_DOWNLOAD}"

   echo "Creating ${BUILD_DIR}/runtimes/php/php.ini" | indent
   BASE_DIR=${BUILD_DIR} erb ${BUILDPACK_DIR}/config/php/php.ini.erb > ${BUILD_DIR}/runtimes/php/php.ini
else
  echo "${BUILD_DIR}/runtimes/php already configured" | indent
fi

echo "-----> Installing HipHop v${HIPHOP_VERSION}"
if [ ! -f "${CACHED_HIPHOP_DOWNLOAD}" ]; then
  echo "Downloading $HIPHOP_URL to cache: ${CACHED_HIPHOP_DOWNLOAD}" | indent
  curl --max-time $DOWNLOAD_TIMEOUT_SEC --location $HIPHOP_URL > "${CACHED_HIPHOP_DOWNLOAD}"
fi
if [ ! -d "${BUILD_DIR}/runtimes/hiphop-php" ]; then
   echo "Extracting ${CACHED_HIPHOP_DOWNLOAD} to ${BUILD_DIR}/runtimes/hiphop-php" | indent
   tar -xz --directory "${BUILD_DIR}/runtimes" -f "${CACHED_HIPHOP_DOWNLOAD}"
else
  echo "${BUILD_DIR}/runtimes/hiphop-php already configured" | indent
fi

echo "-----> Installing wp-cli v${WPCLI_VERSION}"
if [ ! -d "${BUILD_DIR}/runtimes/wp-cli" ]; then
   echo "Fetching wp-cli v${WPCLI_VERSION} and installing into ${BUILD_DIR}/runtimes/wp-cli" | indent
   mkdir -p ${BUILD_DIR}/runtimes/wp-cli | indent
   VERSION=${WPCLI_VERSION} curl http://wp-cli.org/installer.sh | WP_CLI_PHP=${BUILD_DIR}/runtimes/php/bin/php INSTALL_DIR=${BUILD_DIR}/runtimes/wp-cli bash | indent
   
   echo "Linking to /app/app/bin/wp -> /app/app/runtimes/wp-cli/bin/wp" | indent
   mkdir -p ${BUILD_DIR}/bin
   ln -s /app/app/runtimes/wp-cli/bin/wp ${BUILD_DIR}/bin/wp 
   
   echo "Creating ${BUILD_DIR}/wp-cli.yml" | indent
   erb ${BUILDPACK_DIR}/config/wp-cli/wp-cli.yml.erb > ${BUILD_DIR}/wp-cli.yml
   
   echo "Patching wp-cli" | indent
   echo "   * Force it to use /app/app/runtimes/php/bin/php " | indent
   sed --in-place --follow-symlinks --expression \
    "s|# Build the path to the root PHP file|WP_CLI_PHP=/app/app/runtimes/php/bin/php \n# Build the path to the root PHP file|g" \
    "${BUILD_DIR}/runtimes/wp-cli/bin/wp"
   echo "   * Force it to use /app/app/wp-cli.yml" | indent
   sed --in-place --follow-symlinks --expression \
    "s|exec \$php \"\$SCRIPT_PATH\" \"\$@\"|exec \$php \"\$SCRIPT_PATH\" \"\$@\" --config=/app/app/wp-cli.yml|g" \
    "${BUILD_DIR}/runtimes/wp-cli/bin/wp"
else
  echo "${BUILD_DIR}/runtimes/wp-cli already configured" | indent
fi

echo "-----> Installing WordPress v${WORDPRESS_VERSION}"
if [ ! -f "${CACHED_WORDPRESS_DOWNLOAD}"  ]; then
  echo "Downloading $WORDPRESS_URL to cache: ${CACHED_WORDPRESS_DOWNLOAD}" | indent
  curl --max-time $DOWNLOAD_TIMEOUT_SEC --location $WORDPRESS_URL > "${CACHED_WORDPRESS_DOWNLOAD}" 
fi

echo "Extracting ${CACHED_WORDPRESS_DOWNLOAD} to ${BUILD_DIR}/public" | indent
tar -xz --directory "${BUILD_DIR}/public" -f "${CACHED_WORDPRESS_DOWNLOAD}" --strip 1
rm -rf "${BUILD_DIR}/public/wp-config-sample.php"
  
echo "Patching WordPress source to make it HipHop compliant" | indent
sed --in-place --expression \
"s|define( 'OBJECT', 'OBJECT', true );|define('OBJECT', 'OBJECT'); define('Object', 'OBJECT'); define('object', 'OBJECT');|g" \
"${BUILD_DIR}/public/wp-includes/wp-db.php"
    
if [ ! -f "${BUILD_DIR}/public/wp-config-auth_keys_and_salts.inc.php" ]; then
  echo "Fetching WordPress Authentication Unique Keys and Salts" | indent
  echo -e "<?php \n" > "${BUILD_DIR}/public/wp-config-auth_keys_and_salts.inc.php"
  curl --max-time $DOWNLOAD_TIMEOUT_SEC --location https://api.wordpress.org/secret-key/1.1/salt/ >> "${BUILD_DIR}/public/wp-config-auth_keys_and_salts.inc.php" 
else
  echo "Reusing WordPress Authentication Unique Keys and Salts from ${BUILD_DIR}/public/wp-config-auth_keys_and_salts.inc.php" | indent
fi  

echo "-----> Copying config templates"
cp -Rf "${BUILDPACK_DIR}/config" "${BUILD_DIR}" | indent

echo "-----> Creating bin/ scripts"
mkdir -p "${BUILD_DIR}/bin"
cd "${BUILD_DIR}"

# Setup
echo "Writing setup.sh script" | indent
cat >bin/setup.sh <<EOF
#!/usr/bin/env bash
set -e
set -o pipefail

function indent() {
  c='s/^/       /'
  sed -u "\$c"
}

cd "\${BASE_DIR}"
mkdir -p run/nginx_cache

echo "-----> Writing config files..."
erb config/nginx/nginx.conf.erb > runtimes/nginx/conf/nginx.conf

echo "Creating ~/.my.cnf" | indent
erb config/mysql/my.cnf.erb > ~/.my.cnf

echo "Creating runtimes/nginx/conf/wordpress.conf" | indent
if [[ "\${BUILDPACK_CONFIG_TYPE}" = "MULTISITE" ]]; then
  echo "      - from wordpress-multisite.conf.erb" | indent
  erb config/nginx/wordpress-multisite.conf.erb > runtimes/nginx/conf/wordpress.conf
else
  echo "      - from wordpress-singlesite.conf.erb" | indent
  erb config/nginx/wordpress-singlesite.conf.erb > runtimes/nginx/conf/wordpress.conf
fi

echo "Creating run/hhvm.hdf" | indent
erb config/hiphop/hhvm.hdf.erb > run/hhvm.hdf

echo "Creating runtimes/php/php.ini" | indent
erb config/php/php.ini.erb > runtimes/php/php.ini

echo "Creating public/wp-config.php" | indent
chmod 755 public/wp-content
erb config/wordpress/wp-config.php.erb > public/wp-config.php

echo "Adding mu-plugins" | indent
mkdir -p public/wp-content/mu-plugins
erb config/wordpress/mu-plugins/got_rewrite.php.erb > public/wp-content/mu-plugins/got_rewrite.php

if [[ "\${LOGLEVEL}" = "DEBUG" ]]; then
  cp config/wordpress/mu-plugins/inject_debug_footer.php public/wp-content/mu-plugins/inject_debug_footer.php
else
  rm -rf public/wp-content/mu-plugins/inject_debug_footer.php
fi

echo "-----> Configuring database"
config/mysql/init_db | indent

echo "-----> Logs are:"
mkdir -p \${STACKATO_APP_ROOT}/logs
touch "\${STACKATO_APP_ROOT}/logs/access.log" "\${STACKATO_APP_ROOT}/logs/error.log" 
find "\${STACKATO_APP_ROOT}/logs" -name '*.log' | indent

echo "** bin/setup.sh completed" | indent
EOF
chmod +x bin/setup.sh

# Cron job
echo "Writing cron.sh script" | indent
cat >bin/cron.sh <<EOF
#!/usr/bin/env bash

setup.sh && cd public && php wp-cron.php
EOF
chmod +x bin/cron.sh

# Startup
echo "Writing start.sh script" | indent
cat >bin/start.sh <<EOF
#!/usr/bin/env bash
set -e
set -o pipefail

function indent() {
  c='s/^/       /'
  sed -u "\$c"
}

HELP="bin/start {port} {loglevel}"
if [[ -n "\$1" ]]; then
  export PORT=\$1
else
  echo \$HELP
  exit 1
fi
if [[ -n "\$2" ]]; then
  export LOGLEVEL=\$(echo \$2 | tr [:lower:] [:upper:])
else
  export LOGLEVEL="ERROR"
fi

export BUILDPACK_CONFIG_TYPE=\$(echo \$BUILDPACK_CONFIG_TYPE | tr [:lower:] [:upper:])
echo "BUILDPACK_CONFIG_TYPE: \${BUILDPACK_CONFIG_TYPE}"
export APP_SERVER_PORT=4242

export BASE_DIR=\$(cd \$(dirname \$0); cd ..; pwd) # absolute path
echo "-----> BASE_DIR: \${BASE_DIR}"
cd "\${BASE_DIR}"

if [[ -z "\$DATABASE_URL" ]]; then
  export DATABASE_URL=mysql://root:secret_password@127.0.0.1:3306/wordpress
  echo "WARNING! Missing DATABASE_URL environment variable containing WordPress DB settings." | indent
  echo "Defaulting to DATABASE_URL=\${DATABASE_URL}" | indent
fi
if [[ -z "\$DATABASE_SQL_DUMP" ]]; then
  export DATABASE_SQL_DUMP="\${BASE_DIR}/config/empty_db.sql"
  echo "WARNING! Missing DATABASE_SQL_DUMP environment variable containing WordPress DB dump." | indent
  echo "Defaulting to DATABASE_SQL_DUMP=\${DATABASE_SQL_DUMP}" | indent
fi
if [[ -z "\$DATABASE_ALWAYS_REFRESH" ]]; then
  export DATABASE_ALWAYS_REFRESH=false
  echo "WARNING! Missing DATABASE_ALWAYS_REFRESH environment variable." | indent
  echo "Defaulting to DATABASE_ALWAYS_REFRESH=\${DATABASE_ALWAYS_REFRESH}" | indent
fi
if [[ -z "\$STACKATO_APP_ROOT" ]]; then
  export STACKATO_APP_ROOT="\${BASE_DIR}"
  echo "WARNING! Missing STACKATO_APP_ROOT environment variable." | indent
  echo "Defaulting to \${STACKATO_APP_ROOT}" | indent
fi

echo "-----> ** Running bin/setup.sh"
bin/setup.sh
if [[ $? != 0 ]]; then 
  exit $?
fi

KILL_ALL="echo '-----> Cleanup orphaned processes...' && killall -q tail hhvm nginx php || true"
eval \${KILL_ALL}
# When this exits, exit all back ground process too.
trap 'eval \${KILL_ALL}' EXIT

echo "-----> Using LOGLEVEL: \$LOGLEVEL"
echo "[options: Error (default) | Warning | Info | Verbose | Debug_IDE (starts PHP Xdebug server) | Debug (starts Browser based debugger)]" | indent

(tail -q -n 0 -F "\${STACKATO_APP_ROOT}/logs/access.log" -F "\${STACKATO_APP_ROOT}/logs/error.log" &)

if [[ "\${LOGLEVEL}" = "DEBUG" ]] || [[ "\${LOGLEVEL}" = "DEBUG_IDE" ]]; then
  PHP_BIN="\${BASE_DIR}/runtimes/php/bin/php"
  echo "-----> Starting \$(\${PHP_BIN} -v | head -n 1) on port \${PORT}" 
  "\${PHP_BIN}" -S 0.0.0.0:\${PORT} -t "\${BASE_DIR}/public" -c "\${BASE_DIR}/runtimes/php"
else
  BUILDPACK_LOCALE="en_US.UTF-8"
  echo "-----> Setting locale: \$BUILDPACK_LOCALE"
  export LANG=\$BUILDPACK_LOCALE
  export LANGUAGE=\$BUILDPACK_LOCALE
  export LC_ALL=\$BUILDPACK_LOCALE

  export PATH=\${BASE_DIR}runtimes/hiphop-php/bin:\$PATH
  export HHVM_LIB_PATH=\$PATH
  export LD_LIBRARY_PATH=\${BASE_DIR}/runtimes/hiphop-php/lib:\${BASE_DIR}/runtimes/hiphop-php/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH 
  HHVM_BIN="\${BASE_DIR}/runtimes/hiphop-php/bin/hhvm"
  HHVM_VERSION=\$(\${HHVM_BIN} --version | head -n 1)

  echo "-----> Starting \${HHVM_VERSION} on port \${APP_SERVER_PORT}" 
  "\${HHVM_BIN}" --mode daemon --config "\$BASE_DIR/run/hhvm.hdf"

  NGINX_BIN="\${BASE_DIR}/runtimes/nginx/sbin/nginx"
  echo "-----> Starting \$(\${NGINX_BIN} -v 2>&1) on port \${PORT}" 
  "\${NGINX_BIN}" -p "\${BASE_DIR}/runtimes/nginx"
fi
EOF

chmod +x bin/start.sh

if [[ -n "${BUILDPACK_HOOK_POST_COMPILE}" ]]; then
  echo "-----> Running BUILDPACK_HOOK_POST_COMPILE script: ${BUILDPACK_HOOK_POST_COMPILE}"
  ${BUILDPACK_HOOK_POST_COMPILE} | indent
  echo "-----> Done with BUILDPACK_HOOK_POST_COMPILE script"
fi

echo "-----> Done with compile"
